// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/stretchr/testify/mock"
	_ "github.com/stretchr/testify/mock"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder[T]
	mock.Mock
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder[T any] struct {
	mock *MockIRepository[T]
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository[T any](ctrl *gomock.Controller) *MockIRepository[T] {
	mock := &MockIRepository[T]{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository[T]) EXPECT() *MockIRepositoryMockRecorder[T] {
	return m.recorder
}

// Count mocks base method.
func (m *MockIRepository[T]) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIRepositoryMockRecorder[T]) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIRepository[T])(nil).Count))
}

// Delete mocks base method.
func (m *MockIRepository[T]) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryMockRecorder[T]) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository[T])(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockIRepository[T]) GetAll(filter map[string]string, order map[string]string) ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", filter, order)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryMockRecorder[T]) GetAll(filter map[string]string, order map[string]string) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepository[T])(nil).GetAll))
}

// GetById mocks base method.
// GetById mocks base method.
func (m *MockIRepository[T]) GetById(id int) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder[T]) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository[T])(nil).GetById), id)
}

// Save mocks base method.
// Save mocks base method.
func (m *MockIRepository[T]) Save(entity T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIRepositoryMockRecorder[T]) Save(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIRepository[T])(nil).Save), entity)
}
